<?php
/**
 * @file
 * Install, update and uninstall functions for the ._support module.
 *
 */


/**
 * Helpdesk / support ticket tracking system database schema.
 */

/**
 * Support database schema definition.
 */
function support_schema() {
  $schema['support_client'] = array(
    'description' => 'Stores information about support clients.',
    'fields' => array(
      'clid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'integrate_email' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'server_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'server_username' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'server_password' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'mailfrom' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'mailbox' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'protocol' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'extra' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'port' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'autoassign' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Optionally assign new tickets to this user.',
      ),
      'autosubscribe' => array(
        'type' => 'text',
      ),
      'domains' => array(
        'type' => 'text',
        'size' => 'big',
      ),
      'notes' => array(
        'type' => 'text',
        'size' => 'big',
      ),
      'thread_subject' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Optionally configure per-client subject threading settings.',
      ),
      'user_creation' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Optionally configure per-client user creation settings.',
      ),
    ),
    'primary key' => array('clid'),
    'indexes' => array(
      'status' => array('status'),
      'autoassign' => array('autoassign'),
    ),
    'unique keys' => array('name' => array('name')),
  );

  $schema['support_ticket'] = array(
    'description' => 'Stores information about support tickets.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'message_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'state' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'client' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'assigned' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'message_id' => array('message_id'),
      'state' => array('state'),
    ),
  );

  $schema['support_ticket_comment'] = array(
    'description' => 'Stores information about support ticket comments.',
    'fields' => array(
      'cid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'message_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'state' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'client' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'assigned' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'message_id' => array('message_id'),
    ),
  );

  $schema['support_assigned'] = array(
    'description' => 'Stores information about who tickets are assigned to.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
    'indexes' => array(
      'support_assigned_uid' => array('uid'),
    ),
  );

  $schema['support_states'] = array(
    'description' => 'All available support states.',
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'state' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'phase1' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'phase2' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'isdefault' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'isclosed' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'weight_state' => array('weight', 'state'),
      'isdefault' => array('isdefault'),
      'isclosed' => array('isclosed'),
    ),
  );

  $schema['support_priority'] = array(
    'description' => 'All available support priorities.',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'priority' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'isdefault' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'weight_priority' => array('weight', 'priority'),
      'isdefault' => array('isdefault'),
    ),
  );
  return $schema;
}

/**
 * Install support database schema.
 */
function support_install() {
  // State: new
  db_insert('support_states')
    ->fields(array(
    'state' => 'new',
    'weight' => 0,
    'phase1' => 1,
    'phase2' => 0,
    'isdefault' => 1,
  ))
    ->execute();
  // State: active
  db_insert('support_states')
    ->fields(array(
    'state' => 'active',
    'weight' => 1,
    'phase1' => 0,
    'phase2' => 1,
  ))
    ->execute();
  // State: pending
  db_insert('support_states')
    ->fields(array(
    'state' => 'pending',
    'weight' => 2,
    'phase1' => 0,
    'phase2' => 1,
  ))
    ->execute();
  // State: closed
  db_insert('support_states')
    ->fields(array(
    'state' => 'closed',
    'weight' => 3,
    'phase1' => 0,
    'phase2' => 1,
    'isclosed' => 1,
  ))
    ->execute();
  // Priority: low
  db_insert('support_priority')
    ->fields(array(
    'priority' => 'low',
    'weight' => 0,
  ))
    ->execute();
  // Priority: normal
  db_insert('support_priority')
    ->fields(array(
    'priority' => 'normal',
    'weight' => 1,
    'isdefault' => 1,
  ))
    ->execute();
  // Priority: high
  db_insert('support_priority')
    ->fields(array(
    'priority' => 'high',
    'weight' => 2,
  ))
    ->execute();
  // Priority: critical
  db_insert('support_priority')
    ->fields(array(
    'priority' => 'critical',
    'weight' => 3,
  ))
    ->execute();

  // default comment settings
  config_set('support.settings', 'comment_default_mode_support_ticket', COMMENT_MODE_THREADED);
  // TODO: Is there a replacement for this
  //variable_set('comment_default_order_support_ticket', COMMENT_ORDER_OLDEST_FIRST);

  // Set default weight
  db_update('system')
    ->fields(array(
    'weight' => 10,
  ))
    ->condition('name', 'support')
    ->execute();

  // Add body field to support_ticket type.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['support_ticket']);

  // Set up a file field for uploads.
  _support_ensure_upload_field();
  // Dynamically generated variable data was detected on the following lines.
  // /support/support.module line 1592
  // /support/support.module line 2090
}

/**
 * Cleanup; remove all support_ticket content.
 */
function support_uninstall() {
  // Remove support content type.
  node_type_delete('support_ticket');

  // Delete all support tickets.
  $tickets = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('n.type', 'support_ticket')
  ->execute();
  foreach ($tickets as $ticket) {
    node_delete($ticket->nid);
  }

  // Cleanup old support module permissions.
  db_delete('role_permission')
  ->condition('module', 'support')
  ->execute();

  // Cleanup old support module variables.
  foreach (array('support_admin_notify', 'support_autoassign_ticket', 'support_autocomplete_limit', 'support_autocreate_users', 'support_autosubscribe_assigned', 'support_autosubscribe_creator', 'support_autosubscribe_force', 'support_cron_download_mail', 'support_default_sort_order', 'support_default_sort_tickets', 'support_disable_comment_reply', 'support_disable_post_comment', 'support_display_user_links', 'support_global_domains', 'support_global_mailfrom', 'support_notifications', 'support_override_block', 'support_override_theme', 'support_remove_tickets', 'support_require_comment', 'support_secondary_sort_order', 'support_secondary_sort_tickets', 'support_thread_by_mail_headers', 'support_thread_by_subject', 'support_use_aliased_urls', 'support_key', 'support_mail_ticket_comment_new_body', 'support_mail_ticket_comment_new_subject', 'support_mail_ticket_deny_body', 'support_mail_ticket_deny_subject', 'support_mail_ticket_new_body', 'support_mail_ticket_new_subject') as $variable) {
    // TODO This variable was probably removed in Backdrop without replacement.
    variable_del($variable);
  }

}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_6008() { }

/**
 * Update 6009 skipped in Backdrop 7.
 */
/*
 function support_update_6009() {
 }
 */

/**
 * Make sure support_ticket has a field available for node and comment file attachments.
 */
function _support_ensure_upload_field() {
  // Force the file module to be enabled.
  module_enable(array('file'));

  // If you want to migrate from the comment_upload data in D6 but don't want
  // to use this automatically created field, create a file field manually
  // and set this variable to the field name.
  $field_name = config_get('support.settings', 'support_mail_upload_field');

  $info = field_info_field($field_name);

  if (!$info) {
    // Field is missing, create it.
    // TODO This variable was probably removed in Backdrop without replacement.
    $field = array(
      'field_name' => $field_name,
      'type' => 'file',
      'module' => 'file',
      'locked' => FALSE,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'translatable' => FALSE,
      'settings' => array(
        'display_field' => 1,
        'display_default' => variable_get('upload_list_default', 1),
        'uri_scheme' => file_default_scheme(),
        'default_file' => 0,
      ),
    );
    field_create_field($field);
  }

  // TODO This variable was probably removed in Backdrop without replacement.
  $upload_size = variable_get('upload_uploadsize_default', 1);
  // Base instance.
  // TODO This variable was probably removed in Backdrop without replacement.
  $base_instance = array(
    'field_name' => $field_name,
    'entity_type' => NULL,
    'bundle' => NULL,
    'label' => 'File attachments',
    'required' => 0,
    'description' => '',
    'widget' => array(
      'weight' => '1',
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'type' => 'file_generic',
    ),
    'settings' => array(
      'max_filesize' => $upload_size ? ($upload_size . ' MB') : '',
      'file_extensions' => variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'),
      'file_directory' => 'support', // @@@ I think this is a good idea personally but need a second opinion.
      'description_field' => 1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'file_table',
        'settings' => array(),
        'weight' => 0,
        'module' => 'file',
      ),
    ),
  );

  if (!$info || !isset($info['bundles']['comment']) || !in_array('comment_node_support_ticket', $info['bundles']['comment'])) {
    // Field isn't associated with support_ticket comments, attach it.
    $instance = $base_instance;
    $instance['entity_type'] = 'comment';
    $instance['bundle'] = 'comment_node_support_ticket';
    $instance['display']['full'] = $instance['display']['default'];
    field_create_instance($instance);
  }

  if (!$info || !isset($info['bundles']['node']) || !in_array('support_ticket', $info['bundles']['node'])) {
    // Additionally check if the 'upload' field is available -- we support falling back to that
    // if the field is missing, so users with 6.x sites don't end up with 2 fields.
    $info2 = field_info_field('upload');
    if (!$info2 || !isset($info2['bundles']['node']) || !in_array('support_ticket', $info2['bundles']['node'])) {
      // Field isn't associated with support_ticket nodes and there wasn't a legacy upload field, attach it.
      $instance = $base_instance;
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'support_ticket';
      $instance['display']['full'] = $instance['display']['default'];
      $instance['display']['rss'] = $instance['display']['default'];
      $instance['display']['teaser'] = $instance['display']['default'];
      $instance['display']['teaser']['type'] = 'hidden';
      field_create_instance($instance);
    }
  }
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7000() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7001() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7002(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7003() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7004() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7005() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function support_update_7006() { }

/**
 * Implements hook_update_last_removed().
 */
function support_update_last_removed() {
  return 7006;
}

/**
 * Migrate support variables to config.
 */
function support_update_1000() {
  $config = config('support.settings');
  $config->set('support_global_mailfrom', update_variable_get('support_global_mailfrom', ''));
  $config->set('support_autocomplete_limit', update_variable_get('support_autocomplete_limit', '15'));
  $config->set('support_autoassign_ticket', update_variable_get('support_autoassign_ticket', '<nobody>'));
  $config->set('support_default_sort_tickets', update_variable_get('support_default_sort_tickets', 'SUPPORT_SORT_UPDATE'));
  $config->set('support_default_sort_order', update_variable_get('support_default_sort_order', 'SUPPORT_SORT_DESC'));
  $config->set('support_secondary_sort_tickets', update_variable_get('support_secondary_sort_tickets', 'SUPPORT_SORT_NONE'));
  $config->set('support_secondary_sort_order', update_variable_get('support_secondary_sort_order', 'SUPPORT_SORT_DESC'));
  $config->set('support_require_comment', update_variable_get('support_require_comment', TRUE));
  $config->set('support_disable_post_comment', update_variable_get('support_disable_post_comment', array()));
  $config->set('support_disable_comment_reply', update_variable_get('support_disable_comment_reply', array()));
  $config->set('support_notifications', update_variable_get('support_notifications', TRUE));
  $config->set('support_admin_notify', update_variable_get('support_admin_notify', array()));
  $config->set('support_autosubscribe_creator', update_variable_get('support_autosubscribe_creator', array()));
  $config->set('support_autosubscribe_force', update_variable_get('support_autosubscribe_force', array()));
  $config->set('support_autosubscribe_assigned', update_variable_get('support_autosubscribe_assigned', array()));
  $config->set('support_display_user_links', update_variable_get('support_display_user_links', TRUE));
  $config->set('support_autocreate_users', update_variable_get('support_autocreate_users', TRUE));
  $config->set('support_filter_uid1', update_variable_get('support_filter_uid1', array()));
  $config->set('support_remove_tickets', update_variable_get('support_remove_tickets', TRUE));
  $config->set('support_override_theme', update_variable_get('support_override_theme', array()));
  $config->set('support_override_block', update_variable_get('support_override_block', array()));
  $config->set('support_cron_download_mail', update_variable_get('support_cron_download_mail', TRUE));
  $config->set('support_global_domains', update_variable_get('support_global_domains', ''));
  $config->set('support_thread_by_mail_headers', update_variable_get('support_thread_by_mail_headers', TRUE));
  $config->set('support_thread_by_subject', update_variable_get('support_thread_by_subject', '3'));
  $config->set('support_use_aliased_urls', update_variable_get('support_use_aliased_urls', TRUE));
  $config->set('support_key', update_variable_get('support_key', 'tkt'));
  $config->set('support_mail_upload_field', update_variable_get('support_mail_upload_field', 'support_ticket_upload'));
  $config->set('support_mail_key', update_variable_get('support_mail_key', 'dynamic variable in file /support/support.module line 1592'));
  $config->set('support_mail_op_notify', update_variable_get('support_mail_op_notify', 'dynamic variable in file /support/support.module line 2090'));
  $config->set('support_download_limit', update_variable_get('support_download_limit', '1000'));
  $config->save();

  update_variable_del('support_global_mailfrom');
  update_variable_del('support_autocomplete_limit');
  update_variable_del('support_autoassign_ticket');
  update_variable_del('support_default_sort_tickets');
  update_variable_del('support_default_sort_order');
  update_variable_del('support_secondary_sort_tickets');
  update_variable_del('support_secondary_sort_order');
  update_variable_del('support_require_comment');
  update_variable_del('support_disable_post_comment');
  update_variable_del('support_disable_comment_reply');
  update_variable_del('support_notifications');
  update_variable_del('support_admin_notify');
  update_variable_del('support_autosubscribe_creator');
  update_variable_del('support_autosubscribe_force');
  update_variable_del('support_autosubscribe_assigned');
  update_variable_del('support_display_user_links');
  update_variable_del('support_autocreate_users');
  update_variable_del('support_filter_uid1');
  update_variable_del('support_remove_tickets');
  update_variable_del('support_override_theme');
  update_variable_del('support_override_block');
  update_variable_del('support_cron_download_mail');
  update_variable_del('support_global_domains');
  update_variable_del('support_thread_by_mail_headers');
  update_variable_del('support_thread_by_subject');
  update_variable_del('support_use_aliased_urls');
  update_variable_del('support_key');
  update_variable_del('support_mail_upload_field');
  update_variable_del('support_mail_key');
  update_variable_del('support_mail_op_notify');
  update_variable_del('support_download_limit');
}
